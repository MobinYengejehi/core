// Code generated by 'yaegi extract github.com/MobinYengejehi/core/base/iox/imagex'. DO NOT EDIT.

package coresymbols

import (
	"github.com/MobinYengejehi/core/base/iox/imagex"
	"image"
	"image/color"
	"reflect"
)

func init() {
	Symbols["github.com/MobinYengejehi/core/base/iox/imagex/imagex"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsRGBA":           reflect.ValueOf(imagex.AsRGBA),
		"Assert":           reflect.ValueOf(imagex.Assert),
		"BMP":              reflect.ValueOf(imagex.BMP),
		"Base64SplitLines": reflect.ValueOf(imagex.Base64SplitLines),
		"CloneAsRGBA":      reflect.ValueOf(imagex.CloneAsRGBA),
		"ColorsEqual":      reflect.ValueOf(imagex.ColorsEqual),
		"Crop":             reflect.ValueOf(imagex.Crop),
		"DiffImage":        reflect.ValueOf(imagex.DiffImage),
		"ExtToFormat":      reflect.ValueOf(imagex.ExtToFormat),
		"FormatsN":         reflect.ValueOf(imagex.FormatsN),
		"FormatsValues":    reflect.ValueOf(imagex.FormatsValues),
		"FromBase64":       reflect.ValueOf(imagex.FromBase64),
		"GIF":              reflect.ValueOf(imagex.GIF),
		"ImagesEqual":      reflect.ValueOf(imagex.ImagesEqual),
		"JPEG":             reflect.ValueOf(imagex.JPEG),
		"NewJSON":          reflect.ValueOf(imagex.NewJSON),
		"None":             reflect.ValueOf(imagex.None),
		"Open":             reflect.ValueOf(imagex.Open),
		"OpenFS":           reflect.ValueOf(imagex.OpenFS),
		"PNG":              reflect.ValueOf(imagex.PNG),
		"Read":             reflect.ValueOf(imagex.Read),
		"Resize":           reflect.ValueOf(imagex.Resize),
		"Save":             reflect.ValueOf(imagex.Save),
		"TIFF":             reflect.ValueOf(imagex.TIFF),
		"ToBase64":         reflect.ValueOf(imagex.ToBase64),
		"Uint8Equal":       reflect.ValueOf(imagex.Uint8Equal),
		"Unwrap":           reflect.ValueOf(imagex.Unwrap),
		"Update":           reflect.ValueOf(imagex.Update),
		"UpdateTestImages": reflect.ValueOf(&imagex.UpdateTestImages).Elem(),
		"WebP":             reflect.ValueOf(imagex.WebP),
		"WrapJS":           reflect.ValueOf(imagex.WrapJS),
		"Write":            reflect.ValueOf(imagex.Write),

		// type definitions
		"Formats":     reflect.ValueOf((*imagex.Formats)(nil)),
		"JSON":        reflect.ValueOf((*imagex.JSON)(nil)),
		"JSONEncoded": reflect.ValueOf((*imagex.JSONEncoded)(nil)),
		"TestingT":    reflect.ValueOf((*imagex.TestingT)(nil)),
		"Wrapped":     reflect.ValueOf((*imagex.Wrapped)(nil)),

		// interface wrapper definitions
		"_TestingT": reflect.ValueOf((*_cogentcore_org_core_base_iox_imagex_TestingT)(nil)),
		"_Wrapped":  reflect.ValueOf((*_cogentcore_org_core_base_iox_imagex_Wrapped)(nil)),
	}
}

// _cogentcore_org_core_base_iox_imagex_TestingT is an interface wrapper for TestingT type
type _cogentcore_org_core_base_iox_imagex_TestingT struct {
	IValue  interface{}
	WErrorf func(format string, args ...any)
}

func (W _cogentcore_org_core_base_iox_imagex_TestingT) Errorf(format string, args ...any) {
	W.WErrorf(format, args...)
}

// _cogentcore_org_core_base_iox_imagex_Wrapped is an interface wrapper for Wrapped type
type _cogentcore_org_core_base_iox_imagex_Wrapped struct {
	IValue      interface{}
	WAt         func(x int, y int) color.Color
	WBounds     func() image.Rectangle
	WColorModel func() color.Model
	WUnderlying func() image.Image
	WUpdate     func()
}

func (W _cogentcore_org_core_base_iox_imagex_Wrapped) At(x int, y int) color.Color {
	return W.WAt(x, y)
}
func (W _cogentcore_org_core_base_iox_imagex_Wrapped) Bounds() image.Rectangle { return W.WBounds() }
func (W _cogentcore_org_core_base_iox_imagex_Wrapped) ColorModel() color.Model {
	return W.WColorModel()
}
func (W _cogentcore_org_core_base_iox_imagex_Wrapped) Underlying() image.Image {
	return W.WUnderlying()
}
func (W _cogentcore_org_core_base_iox_imagex_Wrapped) Update() { W.WUpdate() }
