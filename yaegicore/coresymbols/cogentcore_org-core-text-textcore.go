// Code generated by 'yaegi extract github.com/MobinYengejehi/core/text/textcore'. DO NOT EDIT.

package coresymbols

import (
	"github.com/MobinYengejehi/core/text/textcore"
	"reflect"
)

func init() {
	Symbols["github.com/MobinYengejehi/core/text/textcore/textcore"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsBase":                   reflect.ValueOf(textcore.AsBase),
		"AsEditor":                 reflect.ValueOf(textcore.AsEditor),
		"Close":                    reflect.ValueOf(textcore.Close),
		"DiffEditorDialog":         reflect.ValueOf(textcore.DiffEditorDialog),
		"DiffEditorDialogFromRevs": reflect.ValueOf(textcore.DiffEditorDialogFromRevs),
		"DiffFiles":                reflect.ValueOf(textcore.DiffFiles),
		"FileModPrompt":            reflect.ValueOf(textcore.FileModPrompt),
		"NewBase":                  reflect.ValueOf(textcore.NewBase),
		"NewDiffEditor":            reflect.ValueOf(textcore.NewDiffEditor),
		"NewDiffTextEditor":        reflect.ValueOf(textcore.NewDiffTextEditor),
		"NewEditor":                reflect.ValueOf(textcore.NewEditor),
		"NewTwinEditors":           reflect.ValueOf(textcore.NewTwinEditors),
		"PrevISearchString":        reflect.ValueOf(&textcore.PrevISearchString).Elem(),
		"Save":                     reflect.ValueOf(textcore.Save),
		"SaveAs":                   reflect.ValueOf(textcore.SaveAs),
		"TextDialog":               reflect.ValueOf(textcore.TextDialog),

		// type definitions
		"Base":                   reflect.ValueOf((*textcore.Base)(nil)),
		"BaseEmbedder":           reflect.ValueOf((*textcore.BaseEmbedder)(nil)),
		"DiffEditor":             reflect.ValueOf((*textcore.DiffEditor)(nil)),
		"DiffTextEditor":         reflect.ValueOf((*textcore.DiffTextEditor)(nil)),
		"Editor":                 reflect.ValueOf((*textcore.Editor)(nil)),
		"EditorEmbedder":         reflect.ValueOf((*textcore.EditorEmbedder)(nil)),
		"ISearch":                reflect.ValueOf((*textcore.ISearch)(nil)),
		"OutputBuffer":           reflect.ValueOf((*textcore.OutputBuffer)(nil)),
		"OutputBufferMarkupFunc": reflect.ValueOf((*textcore.OutputBufferMarkupFunc)(nil)),
		"QReplace":               reflect.ValueOf((*textcore.QReplace)(nil)),
		"TwinEditors":            reflect.ValueOf((*textcore.TwinEditors)(nil)),

		// interface wrapper definitions
		"_BaseEmbedder":   reflect.ValueOf((*_cogentcore_org_core_text_textcore_BaseEmbedder)(nil)),
		"_EditorEmbedder": reflect.ValueOf((*_cogentcore_org_core_text_textcore_EditorEmbedder)(nil)),
	}
}

// _cogentcore_org_core_text_textcore_BaseEmbedder is an interface wrapper for BaseEmbedder type
type _cogentcore_org_core_text_textcore_BaseEmbedder struct {
	IValue  interface{}
	WAsBase func() *textcore.Base
}

func (W _cogentcore_org_core_text_textcore_BaseEmbedder) AsBase() *textcore.Base { return W.WAsBase() }

// _cogentcore_org_core_text_textcore_EditorEmbedder is an interface wrapper for EditorEmbedder type
type _cogentcore_org_core_text_textcore_EditorEmbedder struct {
	IValue    interface{}
	WAsEditor func() *textcore.Editor
}

func (W _cogentcore_org_core_text_textcore_EditorEmbedder) AsEditor() *textcore.Editor {
	return W.WAsEditor()
}
