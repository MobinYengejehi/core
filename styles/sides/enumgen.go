// Code generated by "core generate"; DO NOT EDIT.

package sides

import (
	"github.com/MobinYengejehi/core/enums"
)

var _IndexesValues = []Indexes{0, 1, 2, 3}

// IndexesN is the highest valid value for type Indexes, plus one.
const IndexesN Indexes = 4

var _IndexesValueMap = map[string]Indexes{`Top`: 0, `Right`: 1, `Bottom`: 2, `Left`: 3}

var _IndexesDescMap = map[Indexes]string{0: ``, 1: ``, 2: ``, 3: ``}

var _IndexesMap = map[Indexes]string{0: `Top`, 1: `Right`, 2: `Bottom`, 3: `Left`}

// String returns the string representation of this Indexes value.
func (i Indexes) String() string { return enums.String(i, _IndexesMap) }

// SetString sets the Indexes value from its string representation,
// and returns an error if the string is invalid.
func (i *Indexes) SetString(s string) error {
	return enums.SetString(i, s, _IndexesValueMap, "Indexes")
}

// Int64 returns the Indexes value as an int64.
func (i Indexes) Int64() int64 { return int64(i) }

// SetInt64 sets the Indexes value from an int64.
func (i *Indexes) SetInt64(in int64) { *i = Indexes(in) }

// Desc returns the description of the Indexes value.
func (i Indexes) Desc() string { return enums.Desc(i, _IndexesDescMap) }

// IndexesValues returns all possible values for the type Indexes.
func IndexesValues() []Indexes { return _IndexesValues }

// Values returns all possible values for the type Indexes.
func (i Indexes) Values() []enums.Enum { return enums.Values(_IndexesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Indexes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Indexes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Indexes") }
