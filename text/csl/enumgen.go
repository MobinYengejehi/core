// Code generated by "core generate"; DO NOT EDIT.

package csl

import (
	"github.com/MobinYengejehi/core/enums"
)

var _StylesValues = []Styles{0}

// StylesN is the highest valid value for type Styles, plus one.
const StylesN Styles = 1

var _StylesValueMap = map[string]Styles{`APA`: 0}

var _StylesDescMap = map[Styles]string{0: ``}

var _StylesMap = map[Styles]string{0: `APA`}

// String returns the string representation of this Styles value.
func (i Styles) String() string { return enums.String(i, _StylesMap) }

// SetString sets the Styles value from its string representation,
// and returns an error if the string is invalid.
func (i *Styles) SetString(s string) error { return enums.SetString(i, s, _StylesValueMap, "Styles") }

// Int64 returns the Styles value as an int64.
func (i Styles) Int64() int64 { return int64(i) }

// SetInt64 sets the Styles value from an int64.
func (i *Styles) SetInt64(in int64) { *i = Styles(in) }

// Desc returns the description of the Styles value.
func (i Styles) Desc() string { return enums.Desc(i, _StylesDescMap) }

// StylesValues returns all possible values for the type Styles.
func StylesValues() []Styles { return _StylesValues }

// Values returns all possible values for the type Styles.
func (i Styles) Values() []enums.Enum { return enums.Values(_StylesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Styles) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Styles) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Styles") }

var _CiteStylesValues = []CiteStyles{0, 1}

// CiteStylesN is the highest valid value for type CiteStyles, plus one.
const CiteStylesN CiteStyles = 2

var _CiteStylesValueMap = map[string]CiteStyles{`Parenthetical`: 0, `Narrative`: 1}

var _CiteStylesDescMap = map[CiteStyles]string{0: `Parenthetical means that the citation is placed within parentheses. This is default for most styles. In the APA style for example, it adds a comma before the year, e.g., &#34;(Smith, 1989)&#34;. Note that the parentheses or other outer bracket syntax are NOT generated directly, because often multiple are included together in the same group.`, 1: `Narrative is an active, &#34;inline&#34; form of citation where the cited content is used as the subject of a sentence. In the APA style this puts the year in parentheses, e.g., &#34;Smith (1989) invented the...&#34; In this case the parentheses are generated.`}

var _CiteStylesMap = map[CiteStyles]string{0: `Parenthetical`, 1: `Narrative`}

// String returns the string representation of this CiteStyles value.
func (i CiteStyles) String() string { return enums.String(i, _CiteStylesMap) }

// SetString sets the CiteStyles value from its string representation,
// and returns an error if the string is invalid.
func (i *CiteStyles) SetString(s string) error {
	return enums.SetString(i, s, _CiteStylesValueMap, "CiteStyles")
}

// Int64 returns the CiteStyles value as an int64.
func (i CiteStyles) Int64() int64 { return int64(i) }

// SetInt64 sets the CiteStyles value from an int64.
func (i *CiteStyles) SetInt64(in int64) { *i = CiteStyles(in) }

// Desc returns the description of the CiteStyles value.
func (i CiteStyles) Desc() string { return enums.Desc(i, _CiteStylesDescMap) }

// CiteStylesValues returns all possible values for the type CiteStyles.
func CiteStylesValues() []CiteStyles { return _CiteStylesValues }

// Values returns all possible values for the type CiteStyles.
func (i CiteStyles) Values() []enums.Enum { return enums.Values(_CiteStylesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i CiteStyles) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *CiteStyles) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "CiteStyles")
}

var _TypesValues = []Types{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44}

// TypesN is the highest valid value for type Types, plus one.
const TypesN Types = 45

var _TypesValueMap = map[string]Types{`article`: 0, `article-journal`: 1, `article-magazine`: 2, `article-newspaper`: 3, `bill`: 4, `book`: 5, `broadcast`: 6, `chapter`: 7, `classic`: 8, `collection`: 9, `dataset`: 10, `document`: 11, `entry`: 12, `entry-dictionary`: 13, `entry-encyclopedia`: 14, `event`: 15, `figure`: 16, `graphic`: 17, `hearing`: 18, `interview`: 19, `legal-case`: 20, `legislation`: 21, `manuscript`: 22, `map`: 23, `motion-picture`: 24, `musical-score`: 25, `pamphlet`: 26, `paper-conference`: 27, `patent`: 28, `performance`: 29, `periodical`: 30, `personal-communication`: 31, `post`: 32, `post-weblog`: 33, `regulation`: 34, `report`: 35, `review`: 36, `review-book`: 37, `software`: 38, `song`: 39, `speech`: 40, `standard`: 41, `thesis`: 42, `treaty`: 43, `webpage`: 44}

var _TypesDescMap = map[Types]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: ``, 15: ``, 16: ``, 17: ``, 18: ``, 19: ``, 20: ``, 21: ``, 22: ``, 23: ``, 24: ``, 25: ``, 26: ``, 27: ``, 28: ``, 29: ``, 30: ``, 31: ``, 32: ``, 33: ``, 34: ``, 35: ``, 36: ``, 37: ``, 38: ``, 39: ``, 40: ``, 41: ``, 42: ``, 43: ``, 44: ``}

var _TypesMap = map[Types]string{0: `article`, 1: `article-journal`, 2: `article-magazine`, 3: `article-newspaper`, 4: `bill`, 5: `book`, 6: `broadcast`, 7: `chapter`, 8: `classic`, 9: `collection`, 10: `dataset`, 11: `document`, 12: `entry`, 13: `entry-dictionary`, 14: `entry-encyclopedia`, 15: `event`, 16: `figure`, 17: `graphic`, 18: `hearing`, 19: `interview`, 20: `legal-case`, 21: `legislation`, 22: `manuscript`, 23: `map`, 24: `motion-picture`, 25: `musical-score`, 26: `pamphlet`, 27: `paper-conference`, 28: `patent`, 29: `performance`, 30: `periodical`, 31: `personal-communication`, 32: `post`, 33: `post-weblog`, 34: `regulation`, 35: `report`, 36: `review`, 37: `review-book`, 38: `software`, 39: `song`, 40: `speech`, 41: `standard`, 42: `thesis`, 43: `treaty`, 44: `webpage`}

// String returns the string representation of this Types value.
func (i Types) String() string { return enums.String(i, _TypesMap) }

// SetString sets the Types value from its string representation,
// and returns an error if the string is invalid.
func (i *Types) SetString(s string) error { return enums.SetString(i, s, _TypesValueMap, "Types") }

// Int64 returns the Types value as an int64.
func (i Types) Int64() int64 { return int64(i) }

// SetInt64 sets the Types value from an int64.
func (i *Types) SetInt64(in int64) { *i = Types(in) }

// Desc returns the description of the Types value.
func (i Types) Desc() string { return enums.Desc(i, _TypesDescMap) }

// TypesValues returns all possible values for the type Types.
func TypesValues() []Types { return _TypesValues }

// Values returns all possible values for the type Types.
func (i Types) Values() []enums.Enum { return enums.Values(_TypesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Types) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Types) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Types") }
