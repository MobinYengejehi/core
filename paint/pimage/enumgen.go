// Code generated by "core generate"; DO NOT EDIT.

package pimage

import (
	"github.com/MobinYengejehi/core/enums"
)

var _CmdsValues = []Cmds{0, 1, 2, 3}

// CmdsN is the highest valid value for type Cmds, plus one.
const CmdsN Cmds = 4

var _CmdsValueMap = map[string]Cmds{`Draw`: 0, `Transform`: 1, `Blur`: 2, `SetPixel`: 3}

var _CmdsDescMap = map[Cmds]string{0: `Draw Source image using draw.Draw equivalent function, without any transformation. If Mask is non-nil it is used.`, 1: `Draw Source image with transform. If Mask is non-nil, it is used.`, 2: `blurs the Rect region with the given blur radius. The blur radius passed to this function is the actual Gaussian standard deviation (Ïƒ).`, 3: `Sets pixel from Source image at Pos`}

var _CmdsMap = map[Cmds]string{0: `Draw`, 1: `Transform`, 2: `Blur`, 3: `SetPixel`}

// String returns the string representation of this Cmds value.
func (i Cmds) String() string { return enums.String(i, _CmdsMap) }

// SetString sets the Cmds value from its string representation,
// and returns an error if the string is invalid.
func (i *Cmds) SetString(s string) error { return enums.SetString(i, s, _CmdsValueMap, "Cmds") }

// Int64 returns the Cmds value as an int64.
func (i Cmds) Int64() int64 { return int64(i) }

// SetInt64 sets the Cmds value from an int64.
func (i *Cmds) SetInt64(in int64) { *i = Cmds(in) }

// Desc returns the description of the Cmds value.
func (i Cmds) Desc() string { return enums.Desc(i, _CmdsDescMap) }

// CmdsValues returns all possible values for the type Cmds.
func CmdsValues() []Cmds { return _CmdsValues }

// Values returns all possible values for the type Cmds.
func (i Cmds) Values() []enums.Enum { return enums.Values(_CmdsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Cmds) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Cmds) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Cmds") }
