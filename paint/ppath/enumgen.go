// Code generated by "core generate"; DO NOT EDIT.

package ppath

import (
	"github.com/MobinYengejehi/core/enums"
)

var _FillRulesValues = []FillRules{0, 1, 2, 3}

// FillRulesN is the highest valid value for type FillRules, plus one.
const FillRulesN FillRules = 4

var _FillRulesValueMap = map[string]FillRules{`nonzero`: 0, `evenodd`: 1, `positive`: 2, `negative`: 3}

var _FillRulesDescMap = map[FillRules]string{0: ``, 1: ``, 2: ``, 3: ``}

var _FillRulesMap = map[FillRules]string{0: `nonzero`, 1: `evenodd`, 2: `positive`, 3: `negative`}

// String returns the string representation of this FillRules value.
func (i FillRules) String() string { return enums.String(i, _FillRulesMap) }

// SetString sets the FillRules value from its string representation,
// and returns an error if the string is invalid.
func (i *FillRules) SetString(s string) error {
	return enums.SetString(i, s, _FillRulesValueMap, "FillRules")
}

// Int64 returns the FillRules value as an int64.
func (i FillRules) Int64() int64 { return int64(i) }

// SetInt64 sets the FillRules value from an int64.
func (i *FillRules) SetInt64(in int64) { *i = FillRules(in) }

// Desc returns the description of the FillRules value.
func (i FillRules) Desc() string { return enums.Desc(i, _FillRulesDescMap) }

// FillRulesValues returns all possible values for the type FillRules.
func FillRulesValues() []FillRules { return _FillRulesValues }

// Values returns all possible values for the type FillRules.
func (i FillRules) Values() []enums.Enum { return enums.Values(_FillRulesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i FillRules) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *FillRules) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "FillRules")
}

var _VectorEffectsValues = []VectorEffects{0, 1}

// VectorEffectsN is the highest valid value for type VectorEffects, plus one.
const VectorEffectsN VectorEffects = 2

var _VectorEffectsValueMap = map[string]VectorEffects{`none`: 0, `non-scaling-stroke`: 1}

var _VectorEffectsDescMap = map[VectorEffects]string{0: ``, 1: `VectorEffectNonScalingStroke means that the stroke width is not affected by transform properties`}

var _VectorEffectsMap = map[VectorEffects]string{0: `none`, 1: `non-scaling-stroke`}

// String returns the string representation of this VectorEffects value.
func (i VectorEffects) String() string { return enums.String(i, _VectorEffectsMap) }

// SetString sets the VectorEffects value from its string representation,
// and returns an error if the string is invalid.
func (i *VectorEffects) SetString(s string) error {
	return enums.SetString(i, s, _VectorEffectsValueMap, "VectorEffects")
}

// Int64 returns the VectorEffects value as an int64.
func (i VectorEffects) Int64() int64 { return int64(i) }

// SetInt64 sets the VectorEffects value from an int64.
func (i *VectorEffects) SetInt64(in int64) { *i = VectorEffects(in) }

// Desc returns the description of the VectorEffects value.
func (i VectorEffects) Desc() string { return enums.Desc(i, _VectorEffectsDescMap) }

// VectorEffectsValues returns all possible values for the type VectorEffects.
func VectorEffectsValues() []VectorEffects { return _VectorEffectsValues }

// Values returns all possible values for the type VectorEffects.
func (i VectorEffects) Values() []enums.Enum { return enums.Values(_VectorEffectsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i VectorEffects) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *VectorEffects) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "VectorEffects")
}

var _CapsValues = []Caps{0, 1, 2}

// CapsN is the highest valid value for type Caps, plus one.
const CapsN Caps = 3

var _CapsValueMap = map[string]Caps{`butt`: 0, `round`: 1, `square`: 2}

var _CapsDescMap = map[Caps]string{0: `CapButt indicates to draw no line caps; it draws a line with the length of the specified length.`, 1: `CapRound indicates to draw a semicircle on each line end with a diameter of the stroke width.`, 2: `CapSquare indicates to draw a rectangle on each line end with a height of the stroke width and a width of half of the stroke width.`}

var _CapsMap = map[Caps]string{0: `butt`, 1: `round`, 2: `square`}

// String returns the string representation of this Caps value.
func (i Caps) String() string { return enums.String(i, _CapsMap) }

// SetString sets the Caps value from its string representation,
// and returns an error if the string is invalid.
func (i *Caps) SetString(s string) error { return enums.SetString(i, s, _CapsValueMap, "Caps") }

// Int64 returns the Caps value as an int64.
func (i Caps) Int64() int64 { return int64(i) }

// SetInt64 sets the Caps value from an int64.
func (i *Caps) SetInt64(in int64) { *i = Caps(in) }

// Desc returns the description of the Caps value.
func (i Caps) Desc() string { return enums.Desc(i, _CapsDescMap) }

// CapsValues returns all possible values for the type Caps.
func CapsValues() []Caps { return _CapsValues }

// Values returns all possible values for the type Caps.
func (i Caps) Values() []enums.Enum { return enums.Values(_CapsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Caps) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Caps) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Caps") }

var _JoinsValues = []Joins{0, 1, 2, 3, 4, 5}

// JoinsN is the highest valid value for type Joins, plus one.
const JoinsN Joins = 6

var _JoinsValueMap = map[string]Joins{`miter`: 0, `miter-clip`: 1, `round`: 2, `bevel`: 3, `arcs`: 4, `arcs-clip`: 5}

var _JoinsDescMap = map[Joins]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``}

var _JoinsMap = map[Joins]string{0: `miter`, 1: `miter-clip`, 2: `round`, 3: `bevel`, 4: `arcs`, 5: `arcs-clip`}

// String returns the string representation of this Joins value.
func (i Joins) String() string { return enums.String(i, _JoinsMap) }

// SetString sets the Joins value from its string representation,
// and returns an error if the string is invalid.
func (i *Joins) SetString(s string) error { return enums.SetString(i, s, _JoinsValueMap, "Joins") }

// Int64 returns the Joins value as an int64.
func (i Joins) Int64() int64 { return int64(i) }

// SetInt64 sets the Joins value from an int64.
func (i *Joins) SetInt64(in int64) { *i = Joins(in) }

// Desc returns the description of the Joins value.
func (i Joins) Desc() string { return enums.Desc(i, _JoinsDescMap) }

// JoinsValues returns all possible values for the type Joins.
func JoinsValues() []Joins { return _JoinsValues }

// Values returns all possible values for the type Joins.
func (i Joins) Values() []enums.Enum { return enums.Values(_JoinsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Joins) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Joins) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Joins") }
